from .pdf_generator import PDFGenerator
from reportlab.platypus import Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime
import os

class MaintenanceReportGenerator(PDFGenerator):
    """Generator for maintenance operation reports"""
    
    def __init__(self):
        super().__init__()
    
    def generate_maintenance_report(self, maintenance_data, save_path=None):
        """
        Generate a maintenance report PDF
        
        Args:
            maintenance_data (dict): Dictionary containing maintenance information
            save_path (str): Path where to save the PDF (optional)
        
        Returns:
            str: Path to the generated PDF file, or None if failed
        """
        try:
            # Generate filename
            if save_path is None:
                save_path = self._generate_default_filename(maintenance_data)
            
            # Create PDF content
            content = self._create_maintenance_content(maintenance_data)
            
            # Generate PDF
            if self.create_pdf(save_path, content):
                return save_path
            else:
                return None
                
        except Exception as e:
            print(f"Error generating maintenance report: {e}")
            return None
    
    def _generate_default_filename(self, maintenance_data):
        """Generate a default filename for the maintenance report"""
        try:
            # Extract data for filename
            date = maintenance_data.get('maintenance_date', datetime.now().strftime('%Y-%m-%d'))
            instrument_name = maintenance_data.get('instrument_name', 'Unknown')
            maintenance_type = maintenance_data.get('maintenance_type', 'Maintenance')
            
            # Clean names for filename
            instrument_name = "".join(c for c in instrument_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            maintenance_type = "".join(c for c in maintenance_type if c.isalnum() or c in (' ', '-', '_')).rstrip()
            
            # Create filename
            filename = f"Maintenance_{date}_{instrument_name}_{maintenance_type}.pdf"
            
            # Get default save directory (same as executable)
            from src.utils.path_utils import get_executable_directory
            save_dir = get_executable_directory()
            
            return os.path.join(save_dir, filename)
            
        except Exception as e:
            print(f"Error generating filename: {e}")
            # Fallback filename
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            return f"Maintenance_Report_{timestamp}.pdf"
    
    def _create_maintenance_content(self, maintenance_data):
        """Create the content for the maintenance report"""
        content = []
        
        # Add header
        content.extend(self.add_header("MAINTENANCE OPERATION REPORT"))
        
        # Add report information
        content.extend(self._add_report_info(maintenance_data))
        
        # Add instrument information
        content.extend(self._add_instrument_info(maintenance_data))
        
        # Add maintenance details
        content.extend(self._add_maintenance_details(maintenance_data))
        
        # Add notes section
        content.extend(self._add_notes_section(maintenance_data))
        
        # Add next maintenance information
        content.extend(self._add_next_maintenance_info(maintenance_data))
        
        # Add signature section
        content.extend(self._add_signature_section(maintenance_data))
        
        return content
    
    def _add_report_info(self, data):
        """Add report information section"""
        elements = []
        
        # Report info table
        report_info = {
            'Report Date': data.get('maintenance_date', 'N/A'),
            'Report Number': data.get('report_number', f"MR-{datetime.now().strftime('%Y%m%d%H%M%S')}"),
            'Generated By': data.get('performed_by', 'N/A'),
            'Status': 'Completed'
        }
        
        elements.append(Paragraph("Report Information", self.styles['SectionHeader']))
        elements.extend(self.create_info_table(report_info))
        
        return elements
    
    def _add_instrument_info(self, data):
        """Add instrument information section"""
        elements = []
        
        instrument_info = {
            'Instrument Name': data.get('instrument_name', 'N/A'),
            'Model': data.get('instrument_model', 'N/A'),
            'Serial Number': data.get('serial_number', 'N/A'),
            'Location': data.get('location', 'N/A'),
            'Brand': data.get('brand', 'N/A'),
            'Responsible Person': data.get('responsible_user', 'N/A')
        }
        
        elements.append(Paragraph("Instrument Information", self.styles['SectionHeader']))
        elements.extend(self.create_info_table(instrument_info))
        
        return elements
    
    def _add_maintenance_details(self, data):
        """Add maintenance operation details"""
        elements = []
        
        maintenance_info = {
            'Maintenance Type': data.get('maintenance_type', 'N/A'),
            'Performed By': data.get('performed_by', 'N/A'),
            'Maintenance Date': data.get('maintenance_date', 'N/A'),
            'Operation Status': 'Completed'
        }
        
        elements.append(Paragraph("Maintenance Operation Details", self.styles['SectionHeader']))
        elements.extend(self.create_info_table(maintenance_info))
        
        return elements
    
    def _add_notes_section(self, data):
        """Add notes section"""
        elements = []
        
        elements.append(Paragraph("Maintenance Notes", self.styles['SectionHeader']))
        
        notes = data.get('notes', 'No notes provided.')
        if not notes or notes.strip() == '':
            notes = 'No notes provided.'
        
        elements.append(Paragraph(notes, self.styles['FieldValue']))
        elements.append(Spacer(1, 20))
        
        return elements
    
    def _add_next_maintenance_info(self, data):
        """Add next maintenance information"""
        elements = []
        
        next_maintenance = data.get('next_maintenance_date', 'Not scheduled')
        if next_maintenance and next_maintenance != 'Not scheduled':
            next_info = {
                'Next Maintenance Due': next_maintenance,
                'Maintenance Type': data.get('next_maintenance_type', 'N/A'),
                'Responsible Person': data.get('responsible_user', 'N/A')
            }
            
            elements.append(Paragraph("Next Scheduled Maintenance", self.styles['SectionHeader']))
            elements.extend(self.create_info_table(next_info))
        else:
            elements.append(Paragraph("Next Scheduled Maintenance", self.styles['SectionHeader']))
            elements.append(Paragraph("No next maintenance scheduled.", self.styles['FieldValue']))
            elements.append(Spacer(1, 20))
        
        return elements
    
    def _add_signature_section(self, data):
        """Add signature section"""
        elements = []
        
        elements.append(Paragraph("Verification", self.styles['SectionHeader']))
        
        # Create signature table
        signature_data = [
            ['Performed By:', '_________________', 'Date:', '_________________'],
            ['', '', '', ''],
            ['Verified By:', '_________________', 'Date:', '_________________']
        ]
        
        signature_table = Table(signature_data, colWidths=[1.5*inch, 2*inch, 1*inch, 2*inch])
        signature_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 20),
            ('TOPPADDING', (0, 0), (-1, -1), 10),
        ]))
        
        elements.append(signature_table)
        elements.append(Spacer(1, 30))
        
        return elements 